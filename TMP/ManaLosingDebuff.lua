---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Bergi.
--- DateTime: 26.07.2020 11:40
---
do
	--Инициализация
	TimerStart(CreateTimer(), 0.1, false, function()
		--perebor = CreateGroup() --глобальная группа для перебора всех юнитов 1 единственная на всю игру, больше групп не надо
		--InitManaLoosing()-- чтобы не подгрёб сбощик мусора и + у меня дебаггер прикручен к таймерам и + можно делать отложенный старт системы
	end)
end

ManaLoosingTable = {} --глобальная таблица, аналог хеша, сделана отдельной для изолированности наработки
DeBuffID = FourCC("A000") -- можно сделать на основе ауры замедления торнадо
DeBuffID2 = FourCC("B000") -- бафф иконки ауры торнадо
ImmuneID = FourCC("A001") -- Бафф иммунитет
Porog=0.2 -- пороговое значение для срабатывания дебафа - 20%%


function InitManaLoosing()
	-- Для юнитов изначально стоящих на карте
	TrigLESSEQUAL = CreateTrigger() -- триггер для потери маны меньше 20%%
	TrigGREATERTHAN = CreateTrigger() -- возврата маны

	local NewEntireOnMap = CreateTrigger() -- триггер проверки новых юнитов, созданных триггерно или суммом, ну или просто любых, которых не захватила инициализация карты
	TriggerRegisterEnterRectSimple(NewEntireOnMap, bj_mapInitialPlayableArea)
	TriggerAddAction(NewEntireOnMap, function()
		local EntireUnit = GetTriggerUnit()
		ChkUnitForManaDeBuffSystem(EntireUnit) -- ChkUnitForManaDeBuffSystem проверка и добавление юнита
	end)

	local e = nil
	GroupEnumUnitsInRect(perebor, bj_mapInitialPlayableArea, nil) -- перебор всех юнитов стоящих на карте заранее
	while true do
		e = FirstOfGroup(perebor)
		if e == nil then
			break
		end
		ChkUnitForManaDeBuffSystem(e) -- и добавление им события для проверки маны
		GroupRemoveUnit(perebor, e)
	end
	-- Триггеры проверки маны
	TriggerAddAction(TrigLESSEQUAL, function()
		local hero = GetTriggerUnit()
		UnitAddAbility(hero, DeBuffID)
		print(GetUnitName(hero) .. " значение маны упало ниже 20%%, добавляем наш дебафф")
	end)

	TriggerAddAction(TrigGREATERTHAN, function()
		local hero = GetTriggerUnit()
		if GetUnitAbilityLevel(hero, DeBuffID) > 0 then
			print(GetUnitName(hero) .. " значение маны восстановилось, удаляем дебафы")
			UnitRemoveAbility(hero, DeBuffID)
			UnitRemoveAbility(hero, DeBuffID2)
		else
			print(" Система дебафа еще не настроена, но событие удаления дебафа отработало корректно")
		end
	end)
end

function ChkUnitForManaDeBuffSystem(e) -- а вот и событие наше
	if UnitAlive(e) and not IsUnitType(e, UNIT_TYPE_STRUCTURE) and BlzGetUnitMaxMana(e) > 1 and GetUnitAbilityLevel(e, ImmuneID) == 0 then
		-- условия кому давать или не давать дебафф
		local percent = BlzGetUnitMaxMana(e) * Porog
		print("добавление событий для отлова падения или восстановления маны юнита " .. GetUnitName(e) .. " пороговое значение " .. percent)
		TriggerRegisterUnitManaEvent(TrigLESSEQUAL, e, LESS_THAN_OR_EQUAL, percent)
		TriggerRegisterUnitManaEvent(TrigGREATERTHAN, e, GREATER_THAN_OR_EQUAL, percent) --лучше написать просто  GREATER_THAN, надо проверять
	end
end